unit uPSI_user_charts;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}

{$MODE Delphi}

interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_user_charts = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_user_charts(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_user_charts_Routines(S: TPSExec);

procedure Register;

implementation


uses
   Graphics
  ,TAGraph
  ,TASeries
  ,user_charts
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_user_charts]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_user_charts(CL: TPSPascalCompiler);
begin
 CL.AddDelphiFunction('Procedure ChartSeriesAddXY( ChartIndex, SeriesIndex : integer; X, Y : double)');
 CL.AddDelphiFunction('Procedure ChartSeriesClear( ChartIndex, SeriesIndex : integer)');
 CL.AddDelphiFunction('Procedure ChartSetAxisMinMax( ChartIndex : integer; Xmin, Xmax, Ymin, Ymax : double)');
 CL.AddDelphiFunction('Procedure ChartSeriesSetColor( ChartIndex, SeriesIndex : integer; newColor : TColor)');
 CL.AddDelphiFunction('Function ChartSeriesGetCount( ChartIndex : integer) : integer');
 CL.AddDelphiFunction('Procedure ChartSeriesSetCount( ChartIndex, SeriesCount : integer)');
 CL.AddDelphiFunction('Function ChartSeriesCreate( ChartIndex : integer) : integer');
 CL.AddDelphiFunction('Procedure ChartSeriesDeleteAll( ChartIndex : integer)');
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure RIRegister_user_charts_Routines(S: TPSExec);
begin
 S.RegisterDelphiFunction(@ChartSeriesAddXY, 'ChartSeriesAddXY', cdRegister);
 S.RegisterDelphiFunction(@ChartSeriesClear, 'ChartSeriesClear', cdRegister);
 S.RegisterDelphiFunction(@ChartSetAxisMinMax, 'ChartSetAxisMinMax', cdRegister);
 S.RegisterDelphiFunction(@ChartSeriesSetColor, 'ChartSeriesSetColor', cdRegister);
 S.RegisterDelphiFunction(@ChartSeriesGetCount, 'ChartSeriesGetCount', cdRegister);
 S.RegisterDelphiFunction(@ChartSeriesSetCount, 'ChartSeriesSetCount', cdRegister);
 S.RegisterDelphiFunction(@ChartSeriesCreate, 'ChartSeriesCreate', cdRegister);
 S.RegisterDelphiFunction(@ChartSeriesDeleteAll, 'ChartSeriesDeleteAll', cdRegister);
end;

 
 
{ TPSImport_user_charts }
(*----------------------------------------------------------------------------*)
procedure TPSImport_user_charts.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_user_charts(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_user_charts.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  //RIRegister_user_charts(ri);
  RIRegister_user_charts_Routines(CompExec.Exec); // comment it if no routines
end;
(*----------------------------------------------------------------------------*)
 
 
end.
